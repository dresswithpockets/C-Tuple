.TH "G:/Programming/C-Tuple/src/tuple.h" 3 "Tue Jun 28 2016" "C-Tuple" \" -*- nroff -*-
.ad l
.nh
.SH NAME
G:/Programming/C-Tuple/src/tuple.h \- Tuple\&.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBtuple\fP"
.br
.RI "\fIA Tuple Representation\&. A value of values\&. \fP"
.ti -1c
.RI "struct \fBtuple_ptr\fP"
.br
.RI "\fIA Part of a Tuple\&. \fP"
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBTUPLEAPI\fP"
.br
.RI "\fIShorthand for __declspec(dllimport) \fP"
.ti -1c
.RI "#define \fBTUPLECALL\fP"
.br
.RI "\fIShorthand for __cdecl\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBtuple\fP \fBtuple\fP"
.br
.RI "\fIA Tuple Representation\&. A value of values\&. \fP"
.ti -1c
.RI "typedef struct \fBtuple_ptr\fP \fBtuple_ptr\fP"
.br
.RI "\fIA Part of a Tuple\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBTUPLEAPI\fP int \fBTUPLECALL\fP \fBmake_tuple\fP (\fBtuple\fP *t, int n_args,\&.\&.\&.)"
.br
.RI "\fIPass a collection of \fBtuple_ptr\fP to create a collection of any-value pointers\&. \fP"
.ti -1c
.RI "\fBTUPLEAPI\fP void \fBTUPLECALL\fP \fBfree_tuple\fP (\fBtuple\fP t)"
.br
.RI "\fIPass a pointer to a tuple to be correctly freed and deallocated\&. \fP"
.ti -1c
.RI "\fBTUPLEAPI\fP \fBtuple_ptr\fP \fBTUPLECALL\fP \fBtptr_unowned\fP (void *ptr)"
.br
.RI "\fIPass STACK ALLOCATED pointers to create a tuple_ptr*\&. \fP"
.ti -1c
.RI "\fBTUPLEAPI\fP \fBtuple_ptr\fP \fBTUPLECALL\fP \fBtptr_owned\fP (void *ptr)"
.br
.RI "\fIPass HEAP ALLOCATED pointers to create a tuple_ptr*\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Tuple\&. 

An implementation of Tuples in C-Lang using void pointers\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBtuple\fP  \fBtuple\fP"

.PP
A Tuple Representation\&. A value of values\&. A Tuple contains a collection of pointers to values, as well as information for if specific values were allocated on the stack or not\&.
.PP
If the flags for each t_ptr provided in t_stack are incorrectly assigned, memory leakage will occur\&.
.PP
\fBSee also:\fP
.RS 4
\fBmake_tuple()\fP, \fBfree_tuple()\fP 
.RE
.PP

.SS "typedef struct \fBtuple_ptr\fP  \fBtuple_ptr\fP"

.PP
A Part of a Tuple\&. A Tuple Pointer or a Tuple Part is a value that contains a pointer to a value and a flag suggesting whether or not the value was allocated on the stack\&.
.PP
If the on_stack flag is incorrectly applied, then memory leakage will occur\&.
.PP
\fBSee also:\fP
.RS 4
\fBtptr_owned()\fP, \fBtptr_unowned()\fP, free_tptr() 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "\fBTUPLEAPI\fP void \fBTUPLECALL\fP free_tuple (\fBtuple\fP t)"

.PP
Pass a pointer to a tuple to be correctly freed and deallocated\&. Values in the tuple that have an associated flag identifying it as a stack-allocated value will be ignored when freeing tuple's via \fBfree_tuple()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIt\fP A pointer to an allocated tuple\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBmake_tuple()\fP 
.RE
.PP

.SS "\fBTUPLEAPI\fP int \fBTUPLECALL\fP make_tuple (\fBtuple\fP * t, int n_args,  \&.\&.\&.)"

.PP
Pass a collection of \fBtuple_ptr\fP to create a collection of any-value pointers\&. Ownership of the ptrs within tuple_ptrs is passed onto tuple* t\&.
.PP
\fBParameters:\fP
.RS 4
\fIt\fP A pointer to an instance of tuple that is initialized on the stack\&. 
.br
\fIn_args\fP The number of arguments in the variable argument collection, 
.br
\fI\&.\&.\&.\fP The collection of \fBtuple_ptr\fP pointers, preferrably created via \fBtptr_owned(void* ptr)\fP or \fBtptr_unowned(void* ptr)\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if there is an error when allocating for the tuple, 1 otherwise\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtptr_owned()\fP, \fBtptr_unowned()\fP, \fBfree_tuple()\fP 
.RE
.PP

.SS "\fBTUPLEAPI\fP \fBtuple_ptr\fP \fBTUPLECALL\fP tptr_owned (void * ptr)"

.PP
Pass HEAP ALLOCATED pointers to create a tuple_ptr*\&. 
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP A pointer to any value that was allocated on the heap\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A tuple_ptr* with a void* ptr assigned to the value passed through vptr, with the on_stack flag set to false\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtptr_unowned()\fP, free_tptr_ptr(), \fBmake_tuple()\fP 
.RE
.PP

.SS "\fBTUPLEAPI\fP \fBtuple_ptr\fP \fBTUPLECALL\fP tptr_unowned (void * ptr)"

.PP
Pass STACK ALLOCATED pointers to create a tuple_ptr*\&. 
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP A pointer to any value that was allocated on the stack\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A tuple_ptr* with a void* ptr assigned to the value passed through vptr, with the on_stack flag set to true\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtptr_owned()\fP, free_tptr_ptr(), \fBmake_tuple()\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for C-Tuple from the source code\&.
